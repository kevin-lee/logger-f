"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[421],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},g="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),g=c(n),m=o,f=g["".concat(s,".").concat(m)]||g[m]||p[m]||r;return n?a.createElement(f,l(l({ref:t},u),{},{components:n})):a.createElement(f,l({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[g]="string"==typeof e?e:o,l[1]=i;for(var c=2;c<r;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(7294),o=n(6010);const r="tabItem_Ymn6";function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(r,l),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>C});var a=n(7462),o=n(7294),r=n(6010),l=n(2466),i=n(6550),s=n(1980),c=n(7392),u=n(12);function g(e){return function(e){return o.Children.map(e,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:o}}=e;return{value:t,label:n,attributes:a,default:o}}))}function p(e){const{values:t,children:n}=e;return(0,o.useMemo)((()=>{const e=t??g(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const a=(0,i.k6)(),r=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(r),(0,o.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(a.location.search);t.set(r,e),a.replace({...a.location,search:t.toString()})}),[r,a])]}function d(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,r=p(e),[l,i]=(0,o.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:r}))),[s,c]=f({queryString:n,groupId:a}),[g,d]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,r]=(0,u.Nk)(n);return[a,(0,o.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:a}),b=(()=>{const e=s??g;return m({value:e,tabValues:r})?e:null})();(0,o.useEffect)((()=>{b&&i(b)}),[b]);return{selectedValue:l,selectValue:(0,o.useCallback)((e=>{if(!m({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);i(e),c(e),d(e)}),[c,d,r]),tabValues:r}}var b=n(2389);const v="tabList__CuJ",y="tabItem_LNqP";function h(e){let{className:t,block:n,selectedValue:i,selectValue:s,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:g}=(0,l.o5)(),p=e=>{const t=e.currentTarget,n=u.indexOf(t),a=c[n].value;a!==i&&(g(t),s(a))},m=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:l}=e;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>u.push(e),onKeyDown:m,onClick:p},l,{className:(0,r.Z)("tabs__item",y,l?.className,{"tabs__item--active":i===t})}),n??t)})))}function L(e){let{lazy:t,children:n,selectedValue:a}=e;if(t){const e=n.find((e=>e.props.value===a));return e?(0,o.cloneElement)(e,{className:"margin-top--md"}):null}return o.createElement("div",{className:"margin-top--md"},n.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function k(e){const t=d(e);return o.createElement("div",{className:(0,r.Z)("tabs-container",v)},o.createElement(h,(0,a.Z)({},e,t)),o.createElement(L,(0,a.Z)({},e,t)))}function C(e){const t=(0,b.Z)();return o.createElement(k,(0,a.Z)({key:String(t)},e))}},5443:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>g});var a=n(7462),o=(n(7294),n(3905)),r=n(4866),l=n(5162);const i={sidebar_position:2,id:"import",title:"What to Import"},s="What to Import",c={unversionedId:"cats/import",id:"cats/import",title:"What to Import",description:"Most Places",source:"@site/../generated-docs/docs/cats/import.md",sourceDirName:"cats",slug:"/cats/import",permalink:"/docs/cats/import",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,id:"import",title:"What to Import"},sidebar:"theSidebar",previous:{title:"Get LoggerF",permalink:"/docs/cats/"},next:{title:"Log - Cats",permalink:"/docs/cats/log"}},u={},g=[{value:"Most Places",id:"most-places",level:2},{value:"For Main Method",id:"for-main-method",level:2},{value:"<code>Log[F]</code> Instance",id:"logf-instance",level:3},{value:"Instances for Effectie",id:"instances-for-effectie",level:3},{value:"<code>CanLog</code> (<code>Logger</code>)",id:"canlog-logger",level:3},{value:"Example",id:"example",level:2}],p={toc:g};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"what-to-import"},"What to Import"),(0,o.kt)("h2",{id:"most-places"},"Most Places"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import loggerf.core._\nimport loggerf.syntax.all._\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import loggerf.core._ // for Log\nimport loggerf.syntax.all._ // for log(),  log_(), logS(), logS_(), etc.\n\ndef foo[F[_]: Log](n: Int): F[int] =\n  for {\n    n2 <- bar(n).log(n2 => info(s"n2: $n2"))\n  } yield n + n2\n')),(0,o.kt)("h2",{id:"for-main-method"},"For Main Method"),(0,o.kt)("p",null,"You need instances for ",(0,o.kt)("inlineCode",{parentName:"p"},"Log")," when you actually run your program.\nIt's usually only one place where you put the ",(0,o.kt)("inlineCode",{parentName:"p"},"main")," method."),(0,o.kt)("h3",{id:"logf-instance"},(0,o.kt)("inlineCode",{parentName:"h3"},"Log[F]")," Instance"),(0,o.kt)("p",null,"For the instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"Log[F]"),","),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import loggerf.instances.cats._\n")),(0,o.kt)("h3",{id:"instances-for-effectie"},"Instances for Effectie"),(0,o.kt)("p",null,"For the instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"Fx[F]")," (effectie)"),(0,o.kt)(r.Z,{groupId:"effectie",defaultValue:"monix3",values:[{label:"Monix 3",value:"monix3"},{label:"Cats Effect 2",value:"ce2"},{label:"Cats Effect 3",value:"ce3"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"monix3",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import effectie.instnace.monix3.fx._\n"))),(0,o.kt)(l.Z,{value:"ce2",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import effectie.instnace.ce2.fx._\n"))),(0,o.kt)(l.Z,{value:"ce3",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import effectie.instnace.ce3.fx._\n")))),(0,o.kt)("h3",{id:"canlog-logger"},(0,o.kt)("inlineCode",{parentName:"h3"},"CanLog")," (",(0,o.kt)("inlineCode",{parentName:"h3"},"Logger"),")"),(0,o.kt)(r.Z,{groupId:"loggers",defaultValue:"slf4j",values:[{label:"Slf4J",value:"slf4j"},{label:"Log4s",value:"log4s"},{label:"Log4j",value:"log4j"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"slf4j",mdxType:"TabItem"},(0,o.kt)("p",null,"If you use slf4j or logback, get ",(0,o.kt)("inlineCode",{parentName:"p"},"logger-f-slf4j")," then,"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import loggerf.logger._\n\nimplicit val canLog: CanLog = Slf4JLogger.slf4JCanLog[MyAppType]\n// or\nimplicit val canLog: CanLog = Slf4JLogger.slf4JCanLog[this.type]\n\n// or\nimplicit val canLog: CanLog = Slf4JLogger.slf4JCanLog("my-logger-name")\n\n// or\nimplicit val canLog: CanLog = Slf4JLogger.slf4JCanLogWith(org.slf4j.LoggerFactory.getLogger(getClass))\n'))),(0,o.kt)(l.Z,{value:"log4s",mdxType:"TabItem"},(0,o.kt)("p",null,"If you use log4s, get ",(0,o.kt)("inlineCode",{parentName:"p"},"logger-f-log4s")," then,"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import loggerf.logger._\nimplicit val canLog: CanLog = Log4sLogger.log4sCanLog[MyAppType]\n// or\nimplicit val canLog: CanLog = Log4sLogger.log4sCanLog[this.type]\n\n// or\nimplicit val canLog: CanLog = Log4sLogger.log4sCanLog("my-logger-name")\n\n// or\nimplicit val canLog: CanLog = Log4sLogger.log4sCanLogWith(org.log4s.getLogger)\n'))),(0,o.kt)(l.Z,{value:"log4j",mdxType:"TabItem"},(0,o.kt)("p",null,"If you use log4j, get ",(0,o.kt)("inlineCode",{parentName:"p"},"logger-f-log4j")," then,"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'\nimport loggerf.logger._\nimplicit val canLog: CanLog = Log4jLogger.log4jCanLog[MyAppType]\n// or\nimplicit val canLog: CanLog = Log4jLogger.log4jCanLog[this.type]\n\n// or\nimplicit val canLog: CanLog = Log4jLogger.log4jCanLog("my-logger-name")\n\n// or\nimplicit val canLog: CanLog = Log4jLogger.log4jCanLogWith(org.apache.logging.log4j.LogManager.getLogger(getClass)) \n')))),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\n\nimport effectie.core._\nimport effectie.syntax.all._\n\nimport loggerf.core._\nimport loggerf.syntax.all._\n\ntrait Foo[F[_]] {\n  def foo(name: String): F[Unit]\n}\nobject Foo {\n  def apply[F[_]: Fx: Log: Monad]: Foo[F] = new FooF[F]\n  \n  private class FooF[F[_]: Fx: Log: Monad] extends Foo[F] {\n    def foo(name: String): F[Unit] =\n      for {\n        _ <- s"Name: $name".logS_(info)\n        message <- pureOf(s"Hello $name").log(infoA)\n        _ <- effectOf(println(message))\n      } yield ()\n  }\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.effect._\n\nobject MyApp extends IOApp.Simple {\n  import loggerf.logger._ \n  implicit val canLog: CanLog = Slf4JLogger.slf4JCanLog[this.type]\n\n  import effectie.instances.ce2.fx._\n  import loggerf.instances.cats._\n  \n  def run: IO[Unit] =\n    Foo[IO].foo("Kevin")\n    \n}\n')))}m.isMDXComponent=!0}}]);