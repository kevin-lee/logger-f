"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[478],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var g=a.createContext({}),s=function(e){var t=a.useContext(g),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(g.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,g=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=s(n),d=l,f=u["".concat(g,".").concat(d)]||u[d]||c[d]||r;return n?a.createElement(f,o(o({ref:t},p),{},{components:n})):a.createElement(f,o({ref:t},p))}));function f(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,o=new Array(r);o[0]=d;var i={};for(var g in t)hasOwnProperty.call(t,g)&&(i[g]=t[g]);i.originalType=e,i[u]="string"==typeof e?e:l,o[1]=i;for(var s=2;s<r;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7294),l=n(6010);const r="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,l.Z)(r,o),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>w});var a=n(7462),l=n(7294),r=n(6010),o=n(2466),i=n(6550),g=n(1980),s=n(7392),p=n(12);function u(e){return function(e){return l.Children.map(e,(e=>{if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:l}}=e;return{value:t,label:n,attributes:a,default:l}}))}function c(e){const{values:t,children:n}=e;return(0,l.useMemo)((()=>{const e=t??u(n);return function(e){const t=(0,s.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function d(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const a=(0,i.k6)(),r=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,g._X)(r),(0,l.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(a.location.search);t.set(r,e),a.replace({...a.location,search:t.toString()})}),[r,a])]}function m(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,r=c(e),[o,i]=(0,l.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:r}))),[g,s]=f({queryString:n,groupId:a}),[u,m]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,r]=(0,p.Nk)(n);return[a,(0,l.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:a}),b=(()=>{const e=g??u;return d({value:e,tabValues:r})?e:null})();(0,l.useEffect)((()=>{b&&i(b)}),[b]);return{selectedValue:o,selectValue:(0,l.useCallback)((e=>{if(!d({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);i(e),s(e),m(e)}),[s,m,r]),tabValues:r}}var b=n(2389);const k="tabList__CuJ",h="tabItem_LNqP";function v(e){let{className:t,block:n,selectedValue:i,selectValue:g,tabValues:s}=e;const p=[],{blockElementScrollPositionUntilNextRender:u}=(0,o.o5)(),c=e=>{const t=e.currentTarget,n=p.indexOf(t),a=s[n].value;a!==i&&(u(t),g(a))},d=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=p.indexOf(e.currentTarget)+1;t=p[n]??p[0];break}case"ArrowLeft":{const n=p.indexOf(e.currentTarget)-1;t=p[n]??p[p.length-1];break}}t?.focus()};return l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},t)},s.map((e=>{let{value:t,label:n,attributes:o}=e;return l.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>p.push(e),onKeyDown:d,onClick:c},o,{className:(0,r.Z)("tabs__item",h,o?.className,{"tabs__item--active":i===t})}),n??t)})))}function y(e){let{lazy:t,children:n,selectedValue:a}=e;if(t){const e=n.find((e=>e.props.value===a));return e?(0,l.cloneElement)(e,{className:"margin-top--md"}):null}return l.createElement("div",{className:"margin-top--md"},n.map(((e,t)=>(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function N(e){const t=m(e);return l.createElement("div",{className:(0,r.Z)("tabs-container",k)},l.createElement(v,(0,a.Z)({},e,t)),l.createElement(y,(0,a.Z)({},e,t)))}function w(e){const t=(0,b.Z)();return l.createElement(N,(0,a.Z)({key:String(t)},e))}},5317:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>g,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var a=n(7462),l=(n(7294),n(3905)),r=n(4866),o=n(5162);const i={sidebar_position:1,id:"getting-started",title:"Getting Started",slug:"/"},g=void 0,s={unversionedId:"getting-started",id:"getting-started",title:"Getting Started",description:"Build Status",source:"@site/../generated-docs/docs/getting-started.md",sourceDirName:".",slug:"/",permalink:"/docs/",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,id:"getting-started",title:"Getting Started",slug:"/"},sidebar:"theSidebar",next:{title:"Get LoggerF",permalink:"/docs/cats/"}},p={},u=[{value:"LoggerF - Logger for <code>F[_]</code>",id:"loggerf---logger-for-f_",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Get LoggerF For Cats Effect",id:"get-loggerf-for-cats-effect",level:3},{value:"Get LoggerF For Cats",id:"get-loggerf-for-cats",level:3},{value:"With SLF4J",id:"with-slf4j",level:4},{value:"With Log4j",id:"with-log4j",level:4},{value:"With Log4s",id:"with-log4s",level:4},{value:"With sbt Logging Util",id:"with-sbt-logging-util",level:4},{value:"Why",id:"why",level:2},{value:"Log without LoggerF",id:"log-without-loggerf",level:3},{value:"Log with LoggerF",id:"log-with-loggerf",level:3},{value:"Log without LoggerF (Option and OptionT)",id:"log-without-loggerf-option-and-optiont",level:3},{value:"Log with LoggerF (Option and OptionT)",id:"log-with-loggerf-option-and-optiont",level:3},{value:"Log with LoggerF (EitherT)",id:"log-with-loggerf-eithert",level:3},{value:"Usage",id:"usage",level:2}],c={toc:u};function d(e){let{components:t,...i}=e;return(0,l.kt)("wrapper",(0,a.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("img",{src:n(1984).Z,width:"200",height:"200"})),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/Kevin-Lee/logger-f/actions?workflow=Build-All"},(0,l.kt)("img",{parentName:"a",src:"https://github.com/Kevin-Lee/logger-f/workflows/Build-All/badge.svg",alt:"Build Status"})),"\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/Kevin-Lee/logger-f/actions?workflow=Release"},(0,l.kt)("img",{parentName:"a",src:"https://github.com/Kevin-Lee/logger-f/workflows/Release/badge.svg",alt:"Release Status"})),"\n",(0,l.kt)("a",{parentName:"p",href:"https://index.scala-lang.org/kevin-lee/logger-f"},(0,l.kt)("img",{parentName:"a",src:"https://index.scala-lang.org/kevin-lee/logger-f/latest.svg",alt:"Latest version"}))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"right"},"Project"),(0,l.kt)("th",{parentName:"tr",align:null},"Maven Central"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},"logger-f-cats"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://search.maven.org/artifact/io.kevinlee/logger-f-cats_2.13"},(0,l.kt)("img",{parentName:"a",src:"https://maven-badges.herokuapp.com/maven-central/io.kevinlee/logger-f-cats_2.13/badge.svg",alt:"Maven Central"})))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},"logger-f-slf4j"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://search.maven.org/artifact/io.kevinlee/logger-f-slf4j_2.13"},(0,l.kt)("img",{parentName:"a",src:"https://maven-badges.herokuapp.com/maven-central/io.kevinlee/logger-f-slf4j_2.13/badge.svg",alt:"Maven Central"})))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},"logger-f-log4j"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://search.maven.org/artifact/io.kevinlee/logger-f-log4j_2.13"},(0,l.kt)("img",{parentName:"a",src:"https://maven-badges.herokuapp.com/maven-central/io.kevinlee/logger-f-log4j_2.13/badge.svg",alt:"Maven Central"})))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},"logger-f-log4s"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://search.maven.org/artifact/io.kevinlee/logger-f-log4s_2.13"},(0,l.kt)("img",{parentName:"a",src:"https://maven-badges.herokuapp.com/maven-central/io.kevinlee/logger-f-log4s_2.13/badge.svg",alt:"Maven Central"})))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},"logger-f-sbt-logging"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://search.maven.org/artifact/io.kevinlee/logger-f-sbt-logging_2.13"},(0,l.kt)("img",{parentName:"a",src:"https://maven-badges.herokuapp.com/maven-central/io.kevinlee/logger-f-sbt-logging_2.13/badge.svg",alt:"Maven Central"})))))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Supported Scala Versions: ",(0,l.kt)("inlineCode",{parentName:"li"},"3"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"2.13")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"2.12"))),(0,l.kt)("h2",{id:"loggerf---logger-for-f_"},"LoggerF - Logger for ",(0,l.kt)("inlineCode",{parentName:"h2"},"F[_]")),(0,l.kt)("p",null,"LoggerF is a tool for logging tagless final with an effect library. LoggerF requires ",(0,l.kt)("a",{parentName:"p",href:"https://kevin-lee.github.io/effectie"},"Effectie")," to construct ",(0,l.kt)("inlineCode",{parentName:"p"},"F[_]"),". All the example code in this doc site uses Effectie so if you're not familiar with it, please check out ",(0,l.kt)("a",{parentName:"p",href:"https://kevin-lee.github.io/effectie"},"Effectie")," website."),(0,l.kt)("p",null,"Why LoggerF? Why not just log with ",(0,l.kt)("inlineCode",{parentName:"p"},"map")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"flatMap"),"? Please read ",(0,l.kt)("a",{parentName:"p",href:"#why"},'"Why?"')," section."),(0,l.kt)("h2",{id:"getting-started"},"Getting Started"),(0,l.kt)("h3",{id:"get-loggerf-for-cats-effect"},"Get LoggerF For Cats Effect"),(0,l.kt)("h3",{id:"get-loggerf-for-cats"},"Get LoggerF For Cats"),(0,l.kt)("p",null,"logger-f can be used wit any effect library or ",(0,l.kt)("inlineCode",{parentName:"p"},"Future")," as long as there is an instance of ",(0,l.kt)("inlineCode",{parentName:"p"},"Fx")," from effectie. Effectie provides instances of ",(0,l.kt)("inlineCode",{parentName:"p"},"Fx")," for Cats Effect 2 and 3, and Monix 3."),(0,l.kt)("h4",{id:"with-slf4j"},"With SLF4J"),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"If you use logback, please use this.")),(0,l.kt)(r.Z,{groupId:"slf4j",defaultValue:"slf4j-sbt",values:[{label:"sbt",value:"slf4j-sbt"},{label:"sbt (with libraryDependencies)",value:"slf4j-sbt-lib"},{label:"scala-cli",value:"slf4j-scala-cli"}],mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"slf4j-sbt",mdxType:"TabItem"},(0,l.kt)("p",null,"In ",(0,l.kt)("inlineCode",{parentName:"p"},"build.sbt"),","),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'"io.kevinlee" %% "logger-f-cats" % "2.0.0-beta24",\n"io.kevinlee" %% "logger-f-slf4j" % "2.0.0-beta24",\n'))),(0,l.kt)(o.Z,{value:"slf4j-sbt-lib",mdxType:"TabItem"},(0,l.kt)("p",null,"In ",(0,l.kt)("inlineCode",{parentName:"p"},"build.sbt"),","),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'libraryDependencies ++= Seq(\n    "io.kevinlee" %% "logger-f-cats" % "2.0.0-beta24",\n    "io.kevinlee" %% "logger-f-slf4j" % "2.0.0-beta24",\n  )\n'))),(0,l.kt)(o.Z,{value:"slf4j-scala-cli",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'//> using dep "io.kevinlee::logger-f-cats:2.0.0-beta24"\n//> using dep "io.kevinlee::logger-f-slf4j:2.0.0-beta24"\n')))),(0,l.kt)("h4",{id:"with-log4j"},"With Log4j"),(0,l.kt)(r.Z,{groupId:"log4j",defaultValue:"log4j-sbt",values:[{label:"sbt",value:"log4j-sbt"},{label:"sbt (with libraryDependencies)",value:"log4j-sbt-lib"},{label:"scala-cli",value:"log4j-scala-cli"}],mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"log4j-sbt",mdxType:"TabItem"},(0,l.kt)("p",null,"In ",(0,l.kt)("inlineCode",{parentName:"p"},"build.sbt"),","),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'"io.kevinlee" %% "logger-f-cats" % "2.0.0-beta24",\n"io.kevinlee" %% "logger-f-log4j" % "2.0.0-beta24",\n'))),(0,l.kt)(o.Z,{value:"log4j-sbt-lib",mdxType:"TabItem"},(0,l.kt)("p",null,"In ",(0,l.kt)("inlineCode",{parentName:"p"},"build.sbt"),","),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'libraryDependencies ++= Seq(\n    "io.kevinlee" %% "logger-f-cats" % "2.0.0-beta24",\n    "io.kevinlee" %% "logger-f-log4j" % "2.0.0-beta24",\n  )\n'))),(0,l.kt)(o.Z,{value:"log4j-scala-cli",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'//> using dep "io.kevinlee::logger-f-cats:2.0.0-beta24"\n//> using dep "io.kevinlee::logger-f-log4j:2.0.0-beta24"\n')))),(0,l.kt)("h4",{id:"with-log4s"},"With Log4s"),(0,l.kt)(r.Z,{groupId:"log4s",defaultValue:"log4s-sbt",values:[{label:"sbt",value:"log4s-sbt"},{label:"sbt (with libraryDependencies)",value:"log4s-sbt-lib"},{label:"scala-cli",value:"log4s-scala-cli"}],mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"log4s-sbt",mdxType:"TabItem"},(0,l.kt)("p",null,"In ",(0,l.kt)("inlineCode",{parentName:"p"},"build.sbt"),","),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'"io.kevinlee" %% "logger-f-cats" % "2.0.0-beta24",\n"io.kevinlee" %% "logger-f-log4s" % "2.0.0-beta24",\n'))),(0,l.kt)(o.Z,{value:"log4s-sbt-lib",mdxType:"TabItem"},(0,l.kt)("p",null,"In ",(0,l.kt)("inlineCode",{parentName:"p"},"build.sbt"),","),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'libraryDependencies ++= Seq(\n    "io.kevinlee" %% "logger-f-cats" % "2.0.0-beta24",\n    "io.kevinlee" %% "logger-f-log4s" % "2.0.0-beta24",\n  )\n'))),(0,l.kt)(o.Z,{value:"log4s-scala-cli",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'//> using dep "io.kevinlee::logger-f-cats:2.0.0-beta24"\n//> using dep "io.kevinlee::logger-f-log4s:2.0.0-beta24"\n')))),(0,l.kt)("h4",{id:"with-sbt-logging-util"},"With sbt Logging Util"),(0,l.kt)("p",null,"For sbt plugin development,"),(0,l.kt)(r.Z,{groupId:"sbt-logging",defaultValue:"sbt-logging-sbt",values:[{label:"sbt",value:"sbt-logging-sbt"},{label:"sbt (with libraryDependencies)",value:"sbt-logging-sbt-lib"},{label:"scala-cli",value:"sbt-logging-scala-cli"}],mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"sbt-logging-sbt",mdxType:"TabItem"},(0,l.kt)("p",null,"In ",(0,l.kt)("inlineCode",{parentName:"p"},"build.sbt"),","),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'"io.kevinlee" %% "logger-f-cats" % "2.0.0-beta24",\n"io.kevinlee" %% "logger-f-sbt-logging" % "2.0.0-beta24",\n'))),(0,l.kt)(o.Z,{value:"sbt-logging-sbt-lib",mdxType:"TabItem"},(0,l.kt)("p",null,"In ",(0,l.kt)("inlineCode",{parentName:"p"},"build.sbt"),","),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'libraryDependencies ++= Seq(\n    "io.kevinlee" %% "logger-f-cats" % "2.0.0-beta24",\n    "io.kevinlee" %% "logger-f-sbt-logging" % "2.0.0-beta24",\n  )\n'))),(0,l.kt)(o.Z,{value:"sbt-logging-scala-cli",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'//> using dep "io.kevinlee::logger-f-cats:2.0.0-beta24"\n//> using dep "io.kevinlee::logger-f-sbt-logging:2.0.0-beta24"\n')))),(0,l.kt)("h2",{id:"why"},"Why"),(0,l.kt)("h3",{id:"log-without-loggerf"},"Log without LoggerF"),(0,l.kt)("p",null,"If you code tagless final and use some effect library like ",(0,l.kt)("a",{parentName:"p",href:"https://typelevel.org/cats-effect"},"Cats Effect")," and ",(0,l.kt)("a",{parentName:"p",href:"https://monix.io"},"Monix")," or use ",(0,l.kt)("inlineCode",{parentName:"p"},"Future"),", you may have inconvenience in logging."),(0,l.kt)("p",null,"What inconvenience? I can just log with ",(0,l.kt)("inlineCode",{parentName:"p"},"flatMap")," like."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'for {\n  a <- foo(n) // F[A]\n  _ <- Sync[F].delay(logger.debug(s"a is $a")) // F[Unit]\n  b <- bar(a) // F[B]\n  _ <- Sync[F].delay(logger.debug(s"b is $b")) // F[Unit]\n} yield b\n')),(0,l.kt)("p",null,"That's true, but it's distracting to have log in each flatMap.\nSo,"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"1 line for the actual code\n1 line for logging\n1 line for the actual code\n1 line for logging\n")),(0,l.kt)("h3",{id:"log-with-loggerf"},"Log with LoggerF"),(0,l.kt)("p",null,"It can be simplified by logger-f."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'for {\n  a <- foo(n).log(a => debug(s"a is $a")) // F[A]\n  b <- bar(a).log(b => debug(s"b is $b")) // F[B]\n} yield b\n')),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"log-without-loggerf-option-and-optiont"},"Log without LoggerF (Option and OptionT)"),(0,l.kt)("p",null,"What about ",(0,l.kt)("inlineCode",{parentName:"p"},"F[_]")," with ",(0,l.kt)("inlineCode",{parentName:"p"},"Option")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"Either"),"? What happens if you want to use ",(0,l.kt)("inlineCode",{parentName:"p"},"Option")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"Either"),"?\nIf you use ",(0,l.kt)("inlineCode",{parentName:"p"},"F[_]")," with ",(0,l.kt)("inlineCode",{parentName:"p"},"Option")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"Either"),", you may have more inconvenience or may not get the result you want."),(0,l.kt)("p",null,"e.g.)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.syntax.all._\nimport cats.effect._\n\nimport org.slf4j.LoggerFactory\nval logger = LoggerFactory.getLogger("test-logger")\n// logger: org.slf4j.Logger = Logger[test-logger]\n\ndef foo[F[_]: Sync](n: Int): F[Option[Int]] = for {\n  a <- Sync[F].pure(n.some)\n  _ <- Sync[F].delay(\n         a match {\n           case Some(value) =>\n             logger.debug(s"a is $value")\n           case None =>\n             logger.debug("No \'a\' value found")\n         }\n       ) // F[Unit]\n  b <- Sync[F].pure(none[Int])\n  _ <- Sync[F].delay(\n         b match {\n           case Some(value) =>\n             logger.debug(s"b is $value")\n           case None =>\n             () // don\'t log anything for None case\n         }\n       ) // F[Unit]\n  c <- Sync[F].pure(123.some)\n  _ <- Sync[F].delay(\n         c match {\n           case Some(value) =>\n             () // don\'t log anything for None case\n           case None =>\n             logger.debug("No \'c\' value found")\n         }\n       ) // F[Unit]\n} yield c\n')),(0,l.kt)("p",null,"So much noise for logging!"),(0,l.kt)("p",null,"Now, let's think about the result."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"foo[IO](1).unsafeRunSync() // You probably want to have None here.\n// res1: Option[Int] = Some(value = 123)\n")),(0,l.kt)("p",null,"You expect ",(0,l.kt)("inlineCode",{parentName:"p"},"None")," for the result due to ",(0,l.kt)("inlineCode",{parentName:"p"},"Sync[F].pure(none[Int])")," yet you get ",(0,l.kt)("inlineCode",{parentName:"p"},"Some(123)")," instead. That's because ",(0,l.kt)("inlineCode",{parentName:"p"},"b")," is from ",(0,l.kt)("inlineCode",{parentName:"p"},"F[Option[Int]]")," not from ",(0,l.kt)("inlineCode",{parentName:"p"},"Option[Int]"),"."),(0,l.kt)("p",null,"The same issue exists for ",(0,l.kt)("inlineCode",{parentName:"p"},"F[Either[A, B]]")," as well."),(0,l.kt)("p",null,"So you need to use ",(0,l.kt)("inlineCode",{parentName:"p"},"OptionT")," for ",(0,l.kt)("inlineCode",{parentName:"p"},"F[Option[A]]")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"EitherT")," for ",(0,l.kt)("inlineCode",{parentName:"p"},"F[Either[A, B]]"),"."),(0,l.kt)("p",null,"Let's write it again with ",(0,l.kt)("inlineCode",{parentName:"p"},"OptionT"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.data._\nimport cats.syntax.all._\nimport cats.effect._\n\nimport org.slf4j.LoggerFactory\nval logger = LoggerFactory.getLogger("test-logger")\n// logger: org.slf4j.Logger = Logger[test-logger]\n\ndef foo[F[_]: Sync](n: Int): F[Option[Int]] = (for {\n  a <- OptionT(Sync[F].pure(n.some))\n  _ <- OptionT.liftF(Sync[F].delay(logger.debug(s"a is $a"))) // Now, you can\'t log None case.\n  b <- OptionT(Sync[F].pure(none[Int]))\n  _ <- OptionT.liftF(Sync[F].delay(logger.debug(s"b is $b"))) // You can\'t log None case.\n  c <- OptionT(Sync[F].pure(123.some))\n  _ <- OptionT.liftF(Sync[F].delay(logger.debug(s"c is $c"))) // You can\'t log None case.\n} yield c).value\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"foo[IO](1).unsafeRunSync() // You expect None here.\n// res3: Option[Int] = None\n")),(0,l.kt)("p",null,"The problem's gone! Now each ",(0,l.kt)("inlineCode",{parentName:"p"},"flatMap")," handles only ",(0,l.kt)("inlineCode",{parentName:"p"},"Some")," case and that's what you want. However, because of that, it's hard to log ",(0,l.kt)("inlineCode",{parentName:"p"},"None")," case."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"log-with-loggerf-option-and-optiont"},"Log with LoggerF (Option and OptionT)"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"LoggerF can solve this issue for you!")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.data._\nimport cats.syntax.all._\nimport cats.effect._\n\nimport effectie.core._\nimport effectie.syntax.all._\n\nimport loggerf.core._\nimport loggerf.syntax.all._\n\ndef foo[F[_]: Fx: Monad: Log](n: Int): F[Option[Int]] =\n  (for {\n    a <- OptionT(effectOf(n.some)).log(\n           ifEmpty = error("a is empty"),\n           a => debug(s"a is $a")\n         )\n    b <- OptionT(effectOf(none[Int])).log(\n           error("b is empty"),\n           b => debug(s"b is $b")\n         )\n    c <- OptionT(effectOf(123.some)).log(\n           warn("c is empty"),\n           c => debug(s"c is $c")\n         )\n  } yield c).value\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'import loggerf.logger._\n\n// or Slf4JLogger.slf4JLogger[MyClass]\nimplicit val canLog: CanLog = Slf4JLogger.slf4JCanLog("MyLogger")\n// canLog: CanLog = loggerf.logger.Slf4JLogger@51d4f3a7\n\nimport effectie.instances.ce2.fx._\nimport loggerf.instances.cats._\n\nfoo[IO](1).unsafeRunSync() // You expect None here.\n// res5: Option[Int] = None\n')),(0,l.kt)("p",null,"With logs like"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"00:17:33.983 [main] DEBUG MyLogger - a is 1\n00:17:33.995 [main] ERROR MyLogger - b is empty\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"log-with-loggerf-eithert"},"Log with LoggerF (EitherT)"),(0,l.kt)("p",null,"Another example with ",(0,l.kt)("inlineCode",{parentName:"p"},"EitherT")," (",(0,l.kt)("inlineCode",{parentName:"p"},"F[Either[A, B]]")," case is similar),"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.data._\nimport cats.syntax.all._\nimport cats.effect._\n\nimport effectie.core._\nimport effectie.syntax.all._\n\nimport loggerf.core._\nimport loggerf.syntax.all._\n\ndef foo[F[_]: Fx: Monad: Log](n: Int): F[Either[String, Int]] =\n  (for {\n    a <- EitherT(effectOf(n.asRight[String])).log(\n           err => error(s"Error: $err"),\n           a => debug(s"a is $a")\n         )\n    b <- EitherT(effectOf("Some Error".asLeft[Int])).log(\n           err => error(s"Error: $err"),\n            b => debug(s"b is $b")\n         )\n    c <- EitherT(effectOf(123.asRight[String])).log(\n           err => warn(s"Error: $err"),\n           c => debug(s"c is $c")\n         )\n  } yield c).value\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'import loggerf.logger._\n\n// or Slf4JLogger.slf4JLogger[MyClass]\nimplicit val canLog: CanLog = Slf4JLogger.slf4JCanLog("MyLogger")\n// canLog: CanLog = loggerf.logger.Slf4JLogger@ea9ae8f\n\nimport effectie.instances.ce2.fx._\nimport loggerf.instances.cats._\n\nfoo[IO](1).unsafeRunSync() // You expect Left("Some Error") here.\n// res7: Either[String, Int] = Left(value = "Some Error")\n')),(0,l.kt)("p",null,"With logs like"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"00:40:48.663 [main] DEBUG MyLogger - a is 1\n00:40:48.667 [main] ERROR MyLogger - Error: Some Error\n")),(0,l.kt)("h2",{id:"usage"},"Usage"),(0,l.kt)("p",null,"Please check out"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/cats/"},"LoggerF for Cats"))))}d.isMDXComponent=!0},1984:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/logger-f-logo-200x200-e023b9d5a1ab8fc4da000364a8c266df.png"}}]);