"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[354],{8453:(e,n,o)=>{o.d(n,{R:()=>l,x:()=>a});var t=o(6540);const r={},i=t.createContext(r);function l(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),t.createElement(i.Provider,{value:n},e.children)}},8915:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>l,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"docs/cats-effect/log","title":"Log - Cats","description":"Log - Cats (WIP)","source":"@site/versioned_docs/version-v1/docs/cats-effect/log.md","sourceDirName":"docs/cats-effect","slug":"/docs/cats-effect/log","permalink":"/docs/v1/docs/cats-effect/log","draft":false,"unlisted":false,"tags":[],"version":"v1","frontMatter":{"id":"log","title":"Log - Cats"},"sidebar":"docs","previous":{"title":"Get LoggerF","permalink":"/docs/v1/docs/cats-effect/getting-started"},"next":{"title":"Get LoggerF","permalink":"/docs/v1/docs/monix/getting-started"}}');var r=o(4848),i=o(8453);const l={id:"log",title:"Log - Cats"},a=void 0,s={},c=[{value:"Log - Cats (WIP)",id:"log---cats-wip",level:2},{value:"Log <code>F[A]</code>",id:"log-fa",level:2},{value:"Example",id:"example",level:3},{value:"Log <code>F[Option[A]]</code>",id:"log-foptiona",level:2},{value:"Example",id:"example-1",level:3},{value:"Log <code>F[Either[A, B]]</code>",id:"log-feithera-b",level:2},{value:"Example",id:"example-2",level:3},{value:"Log <code>OptionT[F, A]</code>",id:"log-optiontf-a",level:2},{value:"Log <code>EitherT[F, A, B]</code>",id:"log-eithertf-a-b",level:2}];function g(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"log---cats-wip",children:"Log - Cats (WIP)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Log"})," is a typeclass to log ",(0,r.jsx)(n.code,{children:"F[A]"}),", ",(0,r.jsx)(n.code,{children:"F[Option[A]]"}),", ",(0,r.jsx)(n.code,{children:"F[Either[A, B]]"}),", ",(0,r.jsx)(n.code,{children:"OptionT[F, A]"})," and ",(0,r.jsx)(n.code,{children:"EitherT[F, A, B]"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["It requires ",(0,r.jsx)(n.code,{children:"Fx"})," from ",(0,r.jsx)(n.a,{href:"https://kevin-lee.github.io/effectie",children:"Effectie"})," and ",(0,r.jsx)(n.code,{children:"Monad"})," from ",(0,r.jsx)(n.a,{href:"https://typelevel.org/cats",children:"Cats"}),"."]}),"\n",(0,r.jsxs)(n.h2,{id:"log-fa",children:["Log ",(0,r.jsx)(n.code,{children:"F[A]"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"Log[F].log(F[A])(A => LogMessage)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["A given ",(0,r.jsx)(n.code,{children:"F[A]"}),", you can simply log ",(0,r.jsx)(n.code,{children:"A"})," with ",(0,r.jsx)(n.code,{children:"log"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:'import cats._\nimport cats.syntax.all._\nimport cats.effect._\n\nimport effectie.cats._\nimport effectie.cats.Effectful._\n\nimport loggerf.cats._\nimport loggerf.logger._\nimport loggerf.syntax._\n\ndef hello[F[_]: Functor: Fx: Log](name: String): F[Unit] =\n  log(pureOf(s"Hello $name"))(debug).map(println(_))\n \nobject MyApp extends IOApp {\n\n  implicit val canLog: CanLog = Slf4JLogger.slf4JCanLog("MyApp")\n\n  def run(args: List[String]): IO[ExitCode] = for {\n    _ <- hello[IO]("World")\n    _ <- hello[IO]("Kevin")\n  } yield ExitCode.Success\n}\n\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"23:34:25.021 [ioapp-compute-1] DEBUG MyApp - Hello World\nHello World\n23:34:25.022 [ioapp-compute-1] DEBUG MyApp - Hello Kevin\nHello Kevin\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:'trait Named[A] {\n  def name(a: A): String\n}\n\nobject Named {\n  def apply[A: Named]: Named[A] = implicitly[Named[A]]\n}\n\nfinal case class GivenName(givenName: String) extends AnyVal\nfinal case class Surname(surname: String) extends AnyVal\n\nfinal case class Person(givenName: GivenName, surname: Surname)\nobject Person {\n  implicit val namedPerson: Named[Person] =\n    person => s"${person.givenName.givenName} ${person.surname.surname}"\n}\n\nimport cats._\nimport cats.syntax.all._\nimport cats.effect._\n\nimport effectie.cats.Fx\nimport effectie.cats.ConsoleEffect\nimport effectie.cats.Effectful._\n\nimport loggerf.cats._\nimport loggerf.logger._\nimport loggerf.syntax._\n\ntrait Greeting[F[_]] {\n  def greet[A: Named](a: A): F[String]\n}\n\nobject Greeting {\n  def apply[F[_] : Greeting]: Greeting[F] = implicitly[Greeting[F]]\n\n  implicit def hello[F[_]: Fx: Monad: Log]: Greeting[F] =\n    new Greeting[F] {\n      def greet[A: Named](a: A): F[String] = for {\n        name <- log(effectOf(Named[A].name(a)))(x => info(s"The name is $x"))\n        greeting <- pureOf(s"Hello $name")\n      } yield greeting\n    }\n\n}\n\nobject MyApp extends IOApp {\n\n  implicit val canLog: CanLog = Slf4JLogger.slf4JCanLog("MyApp")\n\n  def run(args: List[String]): IO[ExitCode] = for {\n    greetingMessage <- Greeting[IO].greet(Person(GivenName("Kevin"), Surname("Lee")))\n    _ <- ConsoleEffect[IO].putStrLn(greetingMessage)\n  } yield ExitCode.Success\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"21:02:15.323 [ioapp-compute-0] INFO MyApp - The name is Kevin Lee\nHello Kevin Lee\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"log-foptiona",children:["Log ",(0,r.jsx)(n.code,{children:"F[Option[A]]"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"Log[Option[F]].log(\n  F[Option[A]]\n)(\n  ifEmpty: => LogMessage with MaybeIgnorable,\n  toLeveledMessage: A => LogMessage with MaybeIgnorable\n)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["A given ",(0,r.jsx)(n.code,{children:"F[Option[A]]"}),", you can simply log ",(0,r.jsx)(n.code,{children:"Some(A)"})," or ",(0,r.jsx)(n.code,{children:"None"})," with ",(0,r.jsx)(n.code,{children:"log"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"example-1",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:'import cats._\nimport cats.syntax.all._\nimport cats.effect._\n\nimport effectie.cats._\nimport effectie.cats.Effectful._\n\nimport loggerf.cats._\nimport loggerf.logger._\nimport loggerf.syntax._\n\ndef greeting[F[_]: Fx](name: String): F[String] =\n  pureOf(s"Hello $name")\n\ndef hello[F[_]: Monad: Fx: Log](maybeName: Option[String]): F[Unit] =\n  for {\n    name    <- log(pureOf(maybeName))(\n                 warn("No name given"),\n                 name => info(s"Name: $name")\n               )\n    message <- log(name.traverse(greeting[F]))(ignore, msg => info(s"Message: $msg"))\n    _       <- effectOf(message.foreach(msg => println(msg)))\n  } yield ()\n\n\nimplicit val canLog: CanLog = Slf4JLogger.slf4JCanLog("MyApp- F[Option[A]]")\n// canLog: CanLog = loggerf.logger.Slf4JLogger@4d6f19c2\n\ndef run(): IO[Unit] = for {\n  _ <- hello[IO](none)\n  _ <- hello[IO]("Kevin".some)\n} yield ()\n\nrun().unsafeRunSync()\n// Hello Kevin\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"20:09:43.117 [Thread-31] WARN MyApp- F[Option[A]] - No name given\n20:09:43.133 [Thread-31] INFO MyApp- F[Option[A]] - Name: Kevin\n20:09:43.133 [Thread-31] INFO MyApp- F[Option[A]] - Message: Hello Kevin\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"log-feithera-b",children:["Log ",(0,r.jsx)(n.code,{children:"F[Either[A, B]]"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"Log[Either[F]].log(\n  F[Either[A, B]]\n)(\n  leftToMessage: A => LeveledMessage with MaybeIgnorable,\n  rightToMessage: B => LeveledMessage with MaybeIgnorable\n)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["A given ",(0,r.jsx)(n.code,{children:"F[Either[A, B]]"}),", you can simply log ",(0,r.jsx)(n.code,{children:"Left(A)"})," or ",(0,r.jsx)(n.code,{children:"Right(B)"})," with ",(0,r.jsx)(n.code,{children:"log"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"example-2",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:'import cats._\nimport cats.syntax.all._\nimport cats.effect._\n\nimport effectie.cats._\nimport effectie.cats.Effectful._\n\nimport loggerf.cats._\nimport loggerf.logger._\nimport loggerf.syntax._\n\ndef foo[F[_]: Fx](a: Int): F[Int] =\n  pureOf(a * 2)\n\ndef divide[F[_]: Fx: CanHandleError](a: Int, b: Int): F[Either[String, Int]] =\n  CanHandleError[F].handleNonFatal(effectOf((a / b).asRight[String])){ err =>\n    err.getMessage.asLeft[Int]\n  }\n\ndef calculate[F[_]: Monad: Fx: CanHandleError: Log](n: Int): F[Unit] =\n  for {\n    a      <- log(foo(n))(\n                n => info(s"n: ${n.toString}")\n              )\n    result <- log(divide(1000, a))(\n                err => error(s"Error: $err"),\n                r => info(s"Result: ${r.toString}")\n              )\n    _      <- effectOf(println(result.fold(err => s"Error: $err", r => s"1000 / ${a.toString} = ${r.toString}")))\n  } yield ()\n\n\nimplicit val canLog: CanLog = Slf4JLogger.slf4JCanLog("MyApp - F[Either[A, B]]")\n// canLog: CanLog = loggerf.logger.Slf4JLogger@62b9c962\n\ndef run(): IO[Unit] = for {\n  _ <- calculate[IO](5)\n  _ <- calculate[IO](0)\n} yield ()\n\nrun().unsafeRunSync()\n// 1000 / 10 = 100\n// Error: / by zero\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"20:20:05.588 [Thread-47] INFO MyApp - F[Either[A, B]] - n: 10\n20:20:05.593 [Thread-47] INFO MyApp - F[Either[A, B]] - Result: 100\n20:20:05.595 [Thread-47] INFO MyApp - F[Either[A, B]] - n: 0\n20:20:05.605 [Thread-47] ERROR MyApp - F[Either[A, B]] - Error: / by zero\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"log-optiontf-a",children:["Log ",(0,r.jsx)(n.code,{children:"OptionT[F, A]"})]}),"\n",(0,r.jsxs)(n.h2,{id:"log-eithertf-a-b",children:["Log ",(0,r.jsx)(n.code,{children:"EitherT[F, A, B]"})]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(g,{...e})}):g(e)}}}]);